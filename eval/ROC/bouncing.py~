import os
import caffe
import cv2
import numpy as np
from detection import Network
from xml_read import xmlInfo
from detect_tool import Iou_cal
from darknetV3 import detect
from darknetV3 import load_net
from darknetV3 import load_meta

def calAccAndRecall(objects,groudTruth,thresh_iou):
	Num_True_detection = 0
	Num_False_detection = 0
	Num_Loss_detection = 0

	True_detection = []
	Overlap_detection = []
	False_detection = [ele for ele in objects]   
	Loss_detection = [ele for ele in groudTruth]

	for i in range(len(groudTruth)):
		Iou_sameLabel = []
		for j in range(len(objects)):
			if False_detection[j] != 0 and groudTruth[i]['label_name'] == objects[j]['label_name'] and Iou_cal(objects[j]['box'], groudTruth[i]['box']) > thresh_iou:
				Iou_sameLabel.append(Iou_cal(objects[j]['box'], groudTruth[i]['box']))
			else:
				Iou_sameLabel.append(0)
		if sum(Iou_sameLabel) > 0:
			Loss_detection[i] = 0
			Num_True_detection+=1
			for Iou in Iou_sameLabel:
				if Iou == max(Iou_sameLabel):
					True_detection.append(objects[Iou_sameLabel.index(Iou)])
					False_detection[Iou_sameLabel.index(Iou)] = 0
				elif Iou > 0:
					#print('max(Iou_sameLabel): {}'.format(max(Iou_sameLabel)))
					Overlap_detection.append(objects[Iou_sameLabel.index(Iou)])
					False_detection[Iou_sameLabel.index(Iou)] = 0

    #--------------False_detection--------------
	while 0 in False_detection:
	    False_detection.remove(0)
	Num_False_detection = len(False_detection)
    #-------------loss_detection----------------
	while 0 in Loss_detection:
	    Loss_detection.remove(0)
	Num_Loss_detection = len(Loss_detection)

	return Num_True_detection

def bouncing_box(model_name,deploy,test_path,xml_path,thresh_conf,thresh_iou,output,cfg,model,meta,run_type,labelList):
	Num_img = 0
	TPList = np.zeros(len(labelList))
	groundTruthLabelNum = np.zeros(len(labelList))
	objectsLabelNum = np.zeros(len(labelList))

	print('----------Runing type is {}---------------'.format(run_type))
	if run_type == "ssd":
		caffe.set_device(0)
		caffe.set_mode_gpu()
		net = caffe.Net(deploy, model_name, caffe.TEST)
	elif run_type == "yolov2":
		net = load_net(cfg, model, 0)
		meta = load_meta(meta)
	print('--------loading network done!----------------')
	
	for img_name in os.listdir(test_path):
	    name = img_name.split('.')
	    xml_name = name[0]+'.xml'
	    if os.path.exists(xml_path+xml_name):
		Num_img+=1
		print('Image {}, {} is processing!'.format(Num_img, img_name))

	    #-------------Read groudtruth--------
		groudTruth = xmlInfo(xml_path+xml_name)
	    #-------------Achieve prediction--------
		if run_type == "ssd":
			objects = Network(test_path+img_name, net,thresh_conf)
		elif run_type == "yolov2":
			objects = detect(net, meta, test_path+img_name,thresh_conf)

		for labelName in labelList:
			groundTruthLabel = [ele for ele in groudTruth if ele['label_name']==labelName]
			objectsLabel = [ele for ele in objects if ele['label_name']==labelName]
			groundTruthLabelNum[labelList.index(labelName)] = groundTruthLabelNum[labelList.index(labelName)]+len(groundTruthLabel)
			objectsLabelNum[labelList.index(labelName)] = objectsLabelNum[labelList.index(labelName)]+len(objectsLabel)

			TP = calAccAndRecall(objectsLabel,groundTruthLabel,thresh_iou)
			TPList[labelList.index(labelName)] = TPList[labelList.index(labelName)]+TP
			#print("groundTruthLabelNum: {}".format(groundTruthLabelNum))
			#print("objectsLabelNum: {}".format(objectsLabelNum))
			#print("TPList :{}".format(TPList))

	for labelName in labelList:
		if groundTruthLabelNum[labelList.index(labelName)]==0 or objectsLabelNum[labelList.index(labelName)]==0:
	    		True_detection_rate = 0
		else:
	    		True_detection_rate = float(TPList[labelList.index(labelName)])/float(objectsLabelNum[labelList.index(labelName)])*100
	    		True_recall_rate = float(TPList[labelList.index(labelName)])/float(groundTruthLabelNum[labelList.index(labelName)])*100
	f = open(output+labelName+'.txt','w')
	f.write('Thresh: {} >> Accuracy: {}% >> Recall: {} \n'.format(thresh_conf,True_detection_rate,True_recall_rate))
	f.close()

def main():
	print("start...")
	model_name="/home/wissen/detection/SSD_512x512_64_64_iter_07075.caffemodel"
	deploy="/home/wissen/detection/deploy"
	cfg="/home/wissen/darknetV3-master/cfg/yolov3_my_test.cfg"
	model="/home/wissen/darknetV3-master/backup_save/yolov3_my_0.746.backup"
	meta="/home/wissen/darknetV3-master/cfg/wissen.data"
	test_path="/home/wissen/test/image1/"
	xml_path="/home/wissen/test/xml/"
	labelList = ['car']
	output="/home/wissen/Test_results/results/"
	bouncing_box(model_name,deploy,test_path,xml_path,float(0.1),float(0.5),output,cfg,model,meta,'yolov2',labelList)
    	print("process end!")

if __name__ == "__main__":
    main()



